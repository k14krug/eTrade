from celery import shared_task
from project.models import SP500Stock, SP500StockInfo, SP500HistData
from project.extensions import db, cache
from project.stock_data import StockData
import pandas as pd
import yfinance as yf
from datetime import datetime,  timedelta, date
from datetime import date as date_func
import logging
from celery.contrib.abortable import AbortableTask
from sqlalchemy.exc import IntegrityError, OperationalError
from sqlalchemy.orm.exc import StaleDataError
from time import sleep
import pandas_market_calendars as mcal
import pytz  # Generated by Copilot



logger = logging.getLogger(__name__)

@shared_task(name="update_sp500_data", bind=True, max_retries=0)
def update_sp500_data(self):
    try:
        # Fetch the current S&P 500 list from Wikipedia
        sp500 = pd.read_html('https://en.wikipedia.org/wiki/List_of_S%26P_500_companies')[0]
        logger.info(f"Updating S&P 500 data - looping through {len(sp500)} stocks")

        # Get the NYSE calendar. We will use this to check if the market is open
        nyse = mcal.get_calendar('NYSE')

        for _, row in sp500.iterrows():
            symbol = row['Symbol']
            company_name = row['Security']
            sector = row['GICS Sector']

            # Update SP500Stock table
            stock = SP500Stock.query.filter_by(symbol=symbol).first()
            if not stock:
                stock = SP500Stock(symbol=symbol, company_name=company_name, sector=sector)
                db.session.add(stock)
            else:
                stock.company_name = company_name
                stock.sector = sector
                stock.last_updated = datetime.utcnow()

            # Fetch stock information from yfinance
            ticker = yf.Ticker(symbol)
            info = ticker.info
            if not info:
                logger.warning(f"No stock information found for {symbol}, possibly delisted.")
                continue
            else:
                print("Instantiated ticker Stock Information:")

            # Update SP500StockInfo table
            stock_info = SP500StockInfo.query.filter_by(stock_id=stock.id).first()
            if not stock_info:
                stock_info = SP500StockInfo(stock_id=stock.id)

            stock_info.latest_price = info.get('currentPrice')
            stock_info.previous_day_price = info.get('previousClose')
            stock_info.pe_ratio = info.get('trailingPE')
            stock_info.one_year_target = info.get('targetMeanPrice')
            stock_info.fifty_two_week_low = info.get('fiftyTwoWeekLow')
            stock_info.fifty_two_week_high = info.get('fiftyTwoWeekHigh')
            stock_info.times_above_one_percent, stock_info.times_below_one_percent = StockData.get_volatility_counts(symbol)
            stock_info.last_updated = datetime.utcnow()

            db.session.add(stock_info)
            #logger.info(f"Updated stock info for {symbol}, now updating historical data")

            # Update SP500HistData table
            latest_hist_data = SP500HistData.query.filter_by(stock_id=stock.id).order_by(SP500HistData.date.desc()).first()
            if latest_hist_data:
                start_date = latest_hist_data.date + timedelta(days=1)
            else:
                start_date = date_func(2020, 1, 1)

            end_date = datetime.now().date()
            # Check if the market is open today and adjust end_date accordingly
            today = datetime.now().date()
            end_date = today + timedelta(days=1)

            if start_date <= end_date:
                try:
                    #logger.info(f"Fetching historical data for {symbol} - start: {start_date}, end: {end_date}")
                    hist_data = ticker.history(start=start_date, end=end_date, interval='1d')
                    if hist_data.empty:
                        #logger.warning(f"No historical data found for {symbol}, possibly delisted or no recent data.")
                        continue

                    #logger.info(f"Updating historical data for {symbol} - {len(hist_data)} records, start: {start_date}, end: {end_date}")
                    for date, row in hist_data.iterrows():
                        stock_data = SP500HistData(
                            stock_id=stock.id,
                            date=date.date(),
                            open_price=row['Open'],
                            high_price=row['High'],
                            low_price=row['Low'],
                            close_price=row['Close'],
                            volume=row['Volume']
                        )
                        db.session.add(stock_data)

                except Exception as e:
                    logger.error(f"Error fetching historical data for {symbol}: {e}")
                    continue


            db.session.commit()
            #logger.info(f"Updated data for {symbol} - stock info and historical data")

            # Update task state
            self.update_state(state='PROGRESS', meta={'status': f'Processed {symbol}'})

        # Finalize the update process
        cache.set('sp500_last_updated', datetime.utcnow())
        logger.info("Completed updating S&P 500 stocks and historical data.")
        return {'status': 'Task completed successfully'}

    except Exception as e:
        logger.error(f"Error in update_sp500_data: {str(e)}")
        db.session.rollback()
        raise #self.retry(exc=e)
    